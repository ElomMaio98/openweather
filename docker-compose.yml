version: '3.8'

services:
  # Zookeeper (necessário para o Kafka funcionar)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - weather-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
    networks:
      - weather-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_weather
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: weatherdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - weather-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d weatherdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana (para visualização dos dados)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: ''
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - weather-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local

networks:
  weather-network:
    driver: bridge

# openweather/
# ├── common/
# │   ├── __init__.py
# │   ├── apiclient.py
# │   ├── databaseclient.py
# │   └── kafkaclient.py
# ├── config/
# │   └── locations.json
# ├── consumer/
# │   └── main.py
# ├── producer/
# │   └── main.py
# ├── .env
# ├── .gitignore
# ├── docker-compose.yml  ← NOVO!
# ├── requirements.txt
# └── schema.sql  ← NOVO!